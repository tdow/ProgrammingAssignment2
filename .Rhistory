## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## The first function, makeVector creates a special "vector", which is really a list containing a function to
##  set the value of the vector
##  get the value of the vector
##  set the value of the mean
##  get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInv <- function(Inv) m <<- Inv
getInv <- function() m
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
## The following function calculates the mean of the special
## "vector" created with the above function.
## However, it first checks to see if the mean has already been calculated.
## If so, it gets the mean from the cache and skips the computation.
## Otherwise, it calculates the mean of the data and sets the value of the mean
## in the cache via the setmean function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInv(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
cacheSolve(amatrix)   # Computes, caches, and returns    matrix inverse
amatrix$getinverse()  # Returns matrix inverse
cacheSolve(amatrix)   # Returns cached matrix inverse using previously computed matrix inverse
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(amatrix)   # Computes, caches, and returns new matrix inverse
amatrix$get()         # Returns matrix
amatrix$getinverse()  # Returns matrix inverse
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## The first function, makeVector creates a special "vector", which is really a list containing a function to
##  set the value of the vector
##  get the value of the vector
##  set the value of the mean
##  get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInv <- function(Inv) m <<- Inv
getInv <- function() print(m) m
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
## The following function calculates the mean of the special
## "vector" created with the above function.
## However, it first checks to see if the mean has already been calculated.
## If so, it gets the mean from the cache and skips the computation.
## Otherwise, it calculates the mean of the data and sets the value of the mean
## in the cache via the setmean function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInv(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
cacheSolve(amatrix)   # Computes, caches, and returns    matrix inverse
amatrix$getinverse()  # Returns matrix inverse
cacheSolve(amatrix)   # Returns cached matrix inverse using previously computed matrix inverse
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(amatrix)   # Computes, caches, and returns new matrix inverse
amatrix$get()         # Returns matrix
amatrix$getinverse()  # Returns matrix inverse
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## The first function, makeVector creates a special "vector", which is really a list containing a function to
##  set the value of the vector
##  get the value of the vector
##  set the value of the mean
##  get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInv <- function(Inv) m <<- Inv
getInv <- function() print(m) m
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
## The following function calculates the mean of the special
## "vector" created with the above function.
## However, it first checks to see if the mean has already been calculated.
## If so, it gets the mean from the cache and skips the computation.
## Otherwise, it calculates the mean of the data and sets the value of the mean
## in the cache via the setmean function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInv(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
cacheSolve(amatrix)   # Computes, caches, and returns    matrix inverse
amatrix$getinverse()  # Returns matrix inverse
cacheSolve(amatrix)   # Returns cached matrix inverse using previously computed matrix inverse
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(amatrix)   # Computes, caches, and returns new matrix inverse
amatrix$get()         # Returns matrix
amatrix$getinverse()  # Returns matrix inverse
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## The first function, makeVector creates a special "vector", which is really a list containing a function to
##  set the value of the vector
##  get the value of the vector
##  set the value of the mean
##  get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInv <- function(solve) m <<- Inv
getInv <- function() print(m) m
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
## The following function calculates the mean of the special
## "vector" created with the above function.
## However, it first checks to see if the mean has already been calculated.
## If so, it gets the mean from the cache and skips the computation.
## Otherwise, it calculates the mean of the data and sets the value of the mean
## in the cache via the setmean function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInv(m)
m
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## The first function, makeVector creates a special "vector", which is really a list containing a function to
##  set the value of the vector
##  get the value of the vector
##  set the value of the mean
##  get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInv <- function(solve) m <<- solve
getInv <- function() print(m) m
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
## The following function calculates the mean of the special
## "vector" created with the above function.
## However, it first checks to see if the mean has already been calculated.
## If so, it gets the mean from the cache and skips the computation.
## Otherwise, it calculates the mean of the data and sets the value of the mean
## in the cache via the setmean function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInv(m)
m
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## The first function, makeVector creates a special "vector", which is really a list containing a function to
##  set the value of the vector
##  get the value of the vector
##  set the value of the mean
##  get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y) {
x <<- y
Inv <<- NULL
}
get <- function() x
setInv <- function(solve) Inv <<- solve
getInv <- function() Inv
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
## The following function calculates the mean of the special
## "vector" created with the above function.
## However, it first checks to see if the mean has already been calculated.
## If so, it gets the mean from the cache and skips the computation.
## Otherwise, it calculates the mean of the data and sets the value of the mean
## in the cache via the setmean function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getInv()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data, ...)
x$setInv(Inv)
Inv
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
cacheSolve(amatrix)   # Computes, caches, and returns    matrix inverse
amatrix$getinverse()  # Returns matrix inverse
cacheSolve(amatrix)   # Returns cached matrix inverse using previously computed matrix inverse
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(amatrix)   # Computes, caches, and returns new matrix inverse
amatrix$get()         # Returns matrix
amatrix$getinverse()  # Returns matrix inverse
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## The first function, makeVector creates a special "vector", which is really a list containing a function to
##  set the value of the vector
##  get the value of the vector
##  set the value of the mean
##  get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y) {
x <<- y
Inv <<- NULL
}
get <- function() x
setinverse <- function(solve) Inv <<- solve
getinverse <- function() Inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## The following function calculates the mean of the special
## "vector" created with the above function.
## However, it first checks to see if the mean has already been calculated.
## If so, it gets the mean from the cache and skips the computation.
## Otherwise, it calculates the mean of the data and sets the value of the mean
## in the cache via the setmean function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getInv()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data, ...)
x$setInv(Inv)
Inv
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
cacheSolve(amatrix)   # Computes, caches, and returns    matrix inverse
amatrix$getinverse()  # Returns matrix inverse
cacheSolve(amatrix)   # Returns cached matrix inverse using previously computed matrix inverse
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(amatrix)   # Computes, caches, and returns new matrix inverse
amatrix$get()         # Returns matrix
amatrix$getinverse()  # Returns matrix inverse
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## The first function, makeVector creates a special "vector", which is really a list containing a function to
##  set the value of the vector
##  get the value of the vector
##  set the value of the mean
##  get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y) {
x <<- y
Inv <<- NULL
}
get <- function() x
setinverse <- function(solve) Inv <<- solve
getinverse <- function() Inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## The following function calculates the mean of the special
## "vector" created with the above function.
## However, it first checks to see if the mean has already been calculated.
## If so, it gets the mean from the cache and skips the computation.
## Otherwise, it calculates the mean of the data and sets the value of the mean
## in the cache via the setmean function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getinverse()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data, ...)
x$setinverse(Inv)
Inv
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
cacheSolve(amatrix)   # Computes, caches, and returns    matrix inverse
amatrix$getinverse()  # Returns matrix inverse
cacheSolve(amatrix)   # Returns cached matrix inverse using previously computed matrix inverse
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(amatrix)   # Computes, caches, and returns new matrix inverse
amatrix$get()         # Returns matrix
amatrix$getinverse()  # Returns matrix inverse
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
## The first function, makeVector creates a special "vector", which is really a list containing a function to
##  set the value of the vector
##  get the value of the vector
##  set the value of the mean
##  get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
Inv <- NULL
set <- function(y) {
x <<- y
Inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) Inv <<- inverse
getinverse <- function() Inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
## The following function calculates the mean of the special
## "vector" created with the above function.
## However, it first checks to see if the mean has already been calculated.
## If so, it gets the mean from the cache and skips the computation.
## Otherwise, it calculates the mean of the data and sets the value of the mean
## in the cache via the setmean function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
Inv <- x$getinverse()
if(!is.null(Inv)) {
message("getting cached data")
return(Inv)
}
data <- x$get()
Inv <- solve(data, ...)
x$setinverse(Inv)
Inv
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
cacheSolve(amatrix)   # Computes, caches, and returns    matrix inverse
amatrix$getinverse()  # Returns matrix inverse
cacheSolve(amatrix)   # Returns cached matrix inverse using previously computed matrix inverse
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(amatrix)   # Computes, caches, and returns new matrix inverse
amatrix$get()         # Returns matrix
amatrix$getinverse()  # Returns matrix inverse
?solve
